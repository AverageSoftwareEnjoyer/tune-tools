{
  "version": 3,
  "sources": ["src/app/api/user-http.service.ts", "src/app/components/routes/settings/settings.component.ts", "src/app/components/routes/settings/settings.component.html"],
  "sourcesContent": ["import { HttpClient } from \"@angular/common/http\";\nimport { inject, Injectable } from \"@angular/core\";\nimport { environment } from \"@env/environment\";\nimport { UserInfo } from \"@models/user.model\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class UserHTTPService {\n    readonly #url = `${environment.apiBaseUrl}/me`;\n\n    readonly #httpClient = inject(HttpClient);\n\n    /**\n     * Gets the current user info from the Spotify API.\n     *\n     * @returns An observable that emits the current user info.\n     */\n    getUserInfo$(): Observable<UserInfo> {\n        return this.#httpClient.get<UserInfo>(this.#url);\n    }\n}\n", "import { ChangeDetectionStrategy, Component, inject } from \"@angular/core\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { UserHTTPService } from \"@api/user-http.service\";\n\n@Component({\n    selector: \"app-settings\",\n    standalone: true,\n    imports: [],\n    templateUrl: \"./settings.component.html\",\n    styleUrl: \"./settings.component.scss\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SettingsComponent {\n    readonly #userHTTPService = inject(UserHTTPService);\n\n    constructor() {\n        this.#userHTTPService\n            .getUserInfo$()\n            .pipe(takeUntilDestroyed())\n            .subscribe();\n    }\n}\n", "<p>settings works!</p>\n"],
  "mappings": "0PASA,IAAaA,GAAe,IAAA,CAT5B,IAAAC,EAAAC,EASM,IAAOF,EAAP,MAAOA,CAAe,CAAtB,cACOG,EAAA,KAAAF,EAAO,GAAGG,EAAYC,UAAU,OAEhCF,EAAA,KAAAD,EAAcI,EAAOC,CAAU,GAOxCC,cAAY,CACR,OAAOC,EAAA,KAAKP,GAAYQ,IAAcD,EAAA,KAAKR,EAAI,CACnD,GAXSA,EAAA,YAEAC,EAAA,kDAHAF,EAAe,wBAAfA,EAAeW,QAAfX,EAAeY,UAAAC,WAFZ,MAAM,CAAA,EAEhB,IAAOb,EAAPc,SAAOd,CAAe,GAAA,ECG5B,IAAae,GAAiB,IAAA,CAZ9B,IAAAC,EAYM,IAAOD,EAAP,MAAOA,CAAiB,CAG1BE,aAAA,CAFSC,EAAA,KAAAF,EAAmBG,EAAOC,CAAe,GAG9CC,EAAA,KAAKL,GACAM,aAAY,EACZC,KAAKC,EAAkB,CAAE,EACzBC,UAAS,CAClB,GAPST,EAAA,kDADAD,EAAiB,sBAAjBA,EAAiBW,UAAA,CAAA,CAAA,cAAA,CAAA,EAAAC,WAAA,GAAAC,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICZ9BE,EAAA,EAAA,GAAA,EAAGC,EAAA,EAAA,iBAAA,EAAeC,EAAA,wBDYZ,IAAOtB,EAAPuB,SAAOvB,CAAiB,GAAA",
  "names": ["UserHTTPService", "_url", "_httpClient", "__privateAdd", "environment", "apiBaseUrl", "inject", "HttpClient", "getUserInfo$", "__privateGet", "get", "factory", "\u0275fac", "providedIn", "_UserHTTPService", "SettingsComponent", "_userHTTPService", "constructor", "__privateAdd", "inject", "UserHTTPService", "__privateGet", "getUserInfo$", "pipe", "takeUntilDestroyed", "subscribe", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "_SettingsComponent"]
}
