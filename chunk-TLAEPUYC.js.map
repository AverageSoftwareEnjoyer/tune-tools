{
  "version": 3,
  "sources": ["src/app/model/recently-played.model.ts", "src/app/api/recently-played-http.service.ts", "src/app/components/routes/recently-played.service.ts", "src/app/state/recently-played-state.service.ts", "src/app/components/routes/recently-played/recently-played.component.ts", "src/app/components/routes/recently-played/recently-played.component.html", "src/app/components/routes/recently-played/recently-played.routes.ts"],
  "sourcesContent": ["import { ValueOf } from \"@core/helpers\";\n\nimport {\n    Album,\n    SimplifiedArtist,\n    TopTrack,\n    TopTrackLimited,\n} from \"./top-items.model\";\nimport { ExternalUrls } from \"./user.model\";\n\nexport const RECENTLY_PLAYED_ROUTES = {\n    Default: \"default\",\n    Grouped: \"grouped\",\n} as const;\n\nexport type RecentlyPlayedRoutesOptions = ValueOf<\n    typeof RECENTLY_PLAYED_ROUTES\n>;\n\nexport interface RecentlyPlayedResponse {\n    href: string;\n    limit: number;\n    next: string | null;\n    cursors: Cursors;\n    items: RecentlyPlayedItem[];\n    total: number;\n}\n\nexport interface Cursors {\n    after: string;\n    before: string;\n}\n\nexport interface RecentlyPlayedItem {\n    track: TopTrack<Album, SimplifiedArtist>;\n    played_at: Date;\n    context: Context;\n}\n\nexport interface Context {\n    type: string;\n    href: string;\n    external_urls: ExternalUrls;\n    uri: string;\n}\n\nexport interface RecentlyPlayedParams extends Record<string, number> {\n    before: number;\n    limit: 50;\n}\n\ntype RequiredFromTopTrackLimited = Pick<\n    TopTrackLimited,\n    \"name\" | \"artists\" | \"external_urls\"\n>;\n\nexport interface RecentlyPlayedItemLimited\n    extends Pick<RecentlyPlayedItem, \"played_at\">,\n        RequiredFromTopTrackLimited {}\n\nexport interface RecentlyPlayedItemGrouped extends RequiredFromTopTrackLimited {\n    score: number;\n    normalizedScore: number;\n}\n\nexport const RECENTLY_PLAYED_COLUMNS_KEYS_DEFAULT = {\n    Index: \"index\",\n    Name: \"name\",\n    Date: \"date\",\n    Link: \"link\",\n} as const;\n\nexport type RecentlyPlayedColumnKeysDefault = ValueOf<\n    typeof RECENTLY_PLAYED_COLUMNS_KEYS_DEFAULT\n>;\n\nexport const RECENTLY_PLAYED_COLUMNS_KEYS_MAPPINGS_DEFAULT = {\n    [RECENTLY_PLAYED_COLUMNS_KEYS_DEFAULT.Index]: \"No.\",\n    [RECENTLY_PLAYED_COLUMNS_KEYS_DEFAULT.Name]: \"Name\",\n    [RECENTLY_PLAYED_COLUMNS_KEYS_DEFAULT.Date]: \"Date\",\n    [RECENTLY_PLAYED_COLUMNS_KEYS_DEFAULT.Link]: \"Link\",\n} as const satisfies { [key in RecentlyPlayedColumnKeysDefault]: string };\n\nexport const RECENTLY_PLAYED_COLUMNS_KEYS_GROUPED = {\n    Index: \"index\",\n    Name: \"name\",\n    Score: \"score\",\n    Link: \"link\",\n} as const;\n\nexport type RecentlyPlayedColumnKeysGrouped = ValueOf<\n    typeof RECENTLY_PLAYED_COLUMNS_KEYS_GROUPED\n>;\n\nexport const RECENTLY_PLAYED_COLUMNS_KEYS_MAPPINGS_GROUPED = {\n    [RECENTLY_PLAYED_COLUMNS_KEYS_GROUPED.Index]: \"No.\",\n    [RECENTLY_PLAYED_COLUMNS_KEYS_GROUPED.Name]: \"Name\",\n    [RECENTLY_PLAYED_COLUMNS_KEYS_GROUPED.Score]: \"No. of plays\",\n    [RECENTLY_PLAYED_COLUMNS_KEYS_GROUPED.Link]: \"Link\",\n} as const satisfies { [key in RecentlyPlayedColumnKeysGrouped]: string };\n\nexport const RECENTLY_PLAYED_COLUMNS_KEYS_ALL = {\n    ...RECENTLY_PLAYED_COLUMNS_KEYS_DEFAULT,\n    ...RECENTLY_PLAYED_COLUMNS_KEYS_GROUPED,\n} as const;\n", "import { HttpClient } from \"@angular/common/http\";\nimport { inject, Injectable } from \"@angular/core\";\nimport { environment } from \"@env/environment\";\nimport {\n    RecentlyPlayedParams,\n    RecentlyPlayedResponse,\n} from \"@model/recently-played.model\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class RecentlyPlayedHTTPService {\n    readonly #url = `${environment.apiBaseUrl}/me/player/recently-played`;\n\n    readonly #httpClient = inject(HttpClient);\n\n    /**\n     * Gets recently played items from the Spotify API.\n     *\n     * @param params Params to be used for the HTTP request, including the current time and the\n     * set limit of 50.\n     * @returns An observable that emits the recently played items for the current user.\n     */\n    getRecentlyPlayedItems$(\n        params: RecentlyPlayedParams,\n    ): Observable<RecentlyPlayedResponse> {\n        return this.#httpClient.get<RecentlyPlayedResponse>(this.#url, {\n            params,\n        });\n    }\n}\n", "import { inject, Injectable } from \"@angular/core\";\nimport { normalizeScore } from \"@core/helpers\";\nimport {\n    RecentlyPlayedItem,\n    RecentlyPlayedItemGrouped,\n    RecentlyPlayedItemLimited,\n} from \"@model/recently-played.model\";\n\nimport { TopItemsService } from \"./top-items.service\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class RecentlyPlayedService {\n    readonly #topItemsService = inject(TopItemsService);\n\n    /**\n     *\n     * Converts a `RecentlyPlayedItem` by transforming it to include only essential fields.\n     *\n     * @param item The object to be converted.\n     * @returns An object containing a subset of properties from the original one.\n     */\n    convertRecentlyPlayedItemToLimited(\n        item: RecentlyPlayedItem,\n    ): RecentlyPlayedItemLimited {\n        const { track, played_at } = structuredClone(item);\n        const { name, artists, external_urls } =\n            this.#topItemsService.convertTopTrackToLimited(track);\n        return {\n            name,\n            artists,\n            external_urls,\n            played_at,\n        };\n    }\n\n    /**\n     *\n     * Converts a `RecentlyPlayedItem` by transforming it to include only essential fields and\n     * adding `score` and `normalizedScore.\n     *\n     * @param item The object to be converted.\n     * @returns An object containing a subset of properties from the original one, with the\n     * inclusion of `score` and `normalizedScore`.\n     */\n    convertRecentlyPlayedItemToGrouped(\n        item: RecentlyPlayedItemLimited,\n    ): RecentlyPlayedItemGrouped {\n        const { name, artists, external_urls } = structuredClone(item);\n        return {\n            name,\n            artists,\n            external_urls,\n            score: 0,\n            normalizedScore: 0,\n        };\n    }\n\n    /**\n     *\n     * Groups the given array of recently played items by their Spotify URL and sorts them by the\n     * number of times they were played.\n     *\n     * @param items The array of items to be grouped.\n     * @returns An array of items after grouping and sorting.\n     */\n    groupRecentlyPlayedItems(\n        items: RecentlyPlayedItemLimited[],\n    ): RecentlyPlayedItemGrouped[] {\n        const convertedAndSorted = Array.from(\n            items.reduce((acc, curr) => {\n                const key = curr.external_urls.spotify;\n                const itemByKey = acc.get(key);\n                return acc.set(key, {\n                    ...(itemByKey ??\n                        this.convertRecentlyPlayedItemToGrouped(curr)),\n                    score: (itemByKey?.score ?? 0) + 1,\n                });\n            }, new Map<string, RecentlyPlayedItemGrouped>()),\n        )\n            .map(([, value]) => value)\n            .sort(({ score: scoreA }, { score: scoreB }) => scoreB - scoreA);\n        const maxScore = convertedAndSorted[0]?.score ?? 0;\n        return convertedAndSorted.map((item) => ({\n            ...item,\n            normalizedScore: normalizeScore(item.score, maxScore),\n        }));\n    }\n}\n", "import { inject, Injectable } from \"@angular/core\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { RecentlyPlayedHTTPService } from \"@api/recently-played-http.service\";\nimport {\n    RecentlyPlayedItemGrouped,\n    RecentlyPlayedItemLimited,\n} from \"@model/recently-played.model\";\nimport { RecentlyPlayedService } from \"@routes/recently-played.service\";\nimport { map, Observable, shareReplay } from \"rxjs\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class RecentlyPlayedStateService {\n    recentlyPlayedItemsLimited$: Observable<RecentlyPlayedItemLimited[]>;\n    recentlyPlayedItemsGrouped$: Observable<RecentlyPlayedItemGrouped[]>;\n\n    readonly #recentlyPlayedHTTPService = inject(RecentlyPlayedHTTPService);\n    readonly #recentlyPlayedService = inject(RecentlyPlayedService);\n\n    constructor() {\n        this.recentlyPlayedItemsLimited$ = this.#recentlyPlayedHTTPService\n            .getRecentlyPlayedItems$({\n                before: new Date().getTime(),\n                limit: 50,\n            })\n            .pipe(\n                takeUntilDestroyed(),\n                map(({ items }) =>\n                    items.map((item) =>\n                        this.#recentlyPlayedService.convertRecentlyPlayedItemToLimited(\n                            item,\n                        ),\n                    ),\n                ),\n                shareReplay({ bufferSize: 1, refCount: true }),\n            );\n\n        this.recentlyPlayedItemsGrouped$ =\n            this.recentlyPlayedItemsLimited$.pipe(\n                takeUntilDestroyed(),\n                map((items) =>\n                    this.#recentlyPlayedService.groupRecentlyPlayedItems(items),\n                ),\n                shareReplay({ bufferSize: 1, refCount: true }),\n            );\n    }\n}\n", "import {\n    AsyncPipe,\n    DatePipe,\n    KeyValuePipe,\n    NgStyle,\n    TitleCasePipe,\n} from \"@angular/common\";\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    computed,\n    inject,\n    input,\n} from \"@angular/core\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatTableModule } from \"@angular/material/table\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { RouterLink } from \"@angular/router\";\nimport { keepOrder } from \"@core/helpers\";\nimport {\n    RECENTLY_PLAYED_COLUMNS_KEYS_ALL,\n    RECENTLY_PLAYED_COLUMNS_KEYS_MAPPINGS_DEFAULT,\n    RECENTLY_PLAYED_COLUMNS_KEYS_MAPPINGS_GROUPED,\n    RECENTLY_PLAYED_ROUTES,\n    RecentlyPlayedColumnKeysDefault,\n    RecentlyPlayedColumnKeysGrouped,\n    RecentlyPlayedItemGrouped,\n    RecentlyPlayedItemLimited,\n    RecentlyPlayedRoutesOptions,\n} from \"@model/recently-played.model\";\nimport { RecentlyPlayedStateService } from \"@state/recently-played-state.service\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n    selector: \"app-recently-played\",\n    standalone: true,\n    imports: [\n        AsyncPipe,\n        DatePipe,\n        KeyValuePipe,\n        MatButtonModule,\n        MatIconModule,\n        MatTableModule,\n        MatTooltipModule,\n        NgStyle,\n        RouterLink,\n        TitleCasePipe,\n    ],\n    templateUrl: \"./recently-played.component.html\",\n    styleUrl: \"./recently-played.component.scss\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RecentlyPlayedComponent {\n    viewType = input.required<RecentlyPlayedRoutesOptions>();\n\n    protected readonly keepOrder = keepOrder;\n    protected readonly RECENTLY_PLAYED_COLUMNS_KEYS_ALL =\n        RECENTLY_PLAYED_COLUMNS_KEYS_ALL;\n    protected readonly RECENTLY_PLAYED_ROUTES = RECENTLY_PLAYED_ROUTES;\n\n    protected readonly columns = computed(() => {\n        const viewType = this.viewType();\n        if (viewType === RECENTLY_PLAYED_ROUTES.Default) {\n            return RECENTLY_PLAYED_COLUMNS_KEYS_MAPPINGS_DEFAULT;\n        }\n        return RECENTLY_PLAYED_COLUMNS_KEYS_MAPPINGS_GROUPED;\n    });\n\n    protected readonly columnKeys = computed(\n        () =>\n            Object.keys(this.columns()) as (\n                | RecentlyPlayedColumnKeysDefault\n                | RecentlyPlayedColumnKeysGrouped\n            )[],\n    );\n\n    protected readonly switchToView = computed(() => {\n        const viewType = this.viewType();\n        if (viewType === RECENTLY_PLAYED_ROUTES.Default) {\n            return RECENTLY_PLAYED_ROUTES.Grouped;\n        }\n        return RECENTLY_PLAYED_ROUTES.Default;\n    });\n\n    readonly #recentlyPlayedStateService = inject(RecentlyPlayedStateService);\n\n    protected get items$(): Observable<\n        (RecentlyPlayedItemLimited | RecentlyPlayedItemGrouped)[]\n    > {\n        const viewType = this.viewType();\n        if (viewType === RECENTLY_PLAYED_ROUTES.Default) {\n            return this.#recentlyPlayedStateService.recentlyPlayedItemsLimited$;\n        }\n        return this.#recentlyPlayedStateService.recentlyPlayedItemsGrouped$;\n    }\n}\n", "<div class=\"table-container\">\n    <div class=\"actions-container\">\n        <a\n            mat-flat-button\n            class=\"actions__link\"\n            [routerLink]=\"'../' + switchToView()\"\n            [attr.aria-label]=\"'Switch to ' + switchToView()\"\n        >\n            <mat-icon>view_carousel</mat-icon>\n            Switch to {{ switchToView() }} view\n        </a>\n    </div>\n\n    @if (items$ | async; as items) {\n        <table\n            mat-table\n            [dataSource]=\"items\"\n            multiTemplateDataRows\n            class=\"table\"\n        >\n            @for (column of columns() | keyvalue: keepOrder; track column) {\n                <ng-container [matColumnDef]=\"column.key\">\n                    <th mat-header-cell *matHeaderCellDef>\n                        {{ column.value }}\n                    </th>\n                    @if (\n                        column.key === RECENTLY_PLAYED_COLUMNS_KEYS_ALL.Index\n                    ) {\n                        <td mat-cell *matCellDef=\"let dataIndex = dataIndex\">\n                            {{ dataIndex + 1 }}.\n                        </td>\n                    } @else if (\n                        column.key === RECENTLY_PLAYED_COLUMNS_KEYS_ALL.Name\n                    ) {\n                        <td mat-cell *matCellDef=\"let item\">\n                            {{ item.name | titlecase }}\n                        </td>\n                    } @else if (\n                        column.key === RECENTLY_PLAYED_COLUMNS_KEYS_ALL.Score\n                    ) {\n                        <td\n                            mat-cell\n                            *matCellDef=\"let item\"\n                            [matTooltip]=\"item.score\"\n                        >\n                            <div class=\"score__container\">\n                                <div\n                                    class=\"score__bar\"\n                                    [ngStyle]=\"{\n                                        width: item.normalizedScore + '%',\n                                    }\"\n                                ></div>\n                                <span class=\"score__text\">{{\n                                    item.score\n                                }}</span>\n                            </div>\n                        </td>\n                    } @else if (\n                        column.key === RECENTLY_PLAYED_COLUMNS_KEYS_ALL.Date\n                    ) {\n                        <td mat-cell *matCellDef=\"let item\">\n                            {{ item.played_at | date: \"dd-MM-yyyy HH:mm\" }}\n                        </td>\n                    } @else if (\n                        column.key === RECENTLY_PLAYED_COLUMNS_KEYS_ALL.Link\n                    ) {\n                        <td mat-cell *matCellDef=\"let item\">\n                            <a\n                                mat-icon-button\n                                [href]=\"item.external_urls.spotify\"\n                                target=\"_blank\"\n                                rel=\"noreferrer noopener\"\n                                (click)=\"$event.stopPropagation()\"\n                                aria-label=\"Listen on Spotify\"\n                            >\n                                <mat-icon>library_music</mat-icon>\n                            </a>\n                        </td>\n                    }\n                </ng-container>\n            }\n            <tr mat-header-row *matHeaderRowDef=\"columnKeys()\"></tr>\n            <tr\n                mat-row\n                *matRowDef=\"let item; columns: columnKeys()\"\n                class=\"item-row\"\n            ></tr>\n        </table>\n    }\n</div>\n", "import { Routes } from \"@angular/router\";\nimport { routeParamGuard } from \"@core/helpers\";\nimport { RECENTLY_PLAYED_ROUTES } from \"@model/recently-played.model\";\n\nimport { RecentlyPlayedComponent } from \"./recently-played.component\";\n\nexport default [\n    {\n        path: \":viewType\",\n        component: RecentlyPlayedComponent,\n        canActivate: [\n            routeParamGuard(\n                \"recently-played\",\n                RECENTLY_PLAYED_ROUTES,\n                \"viewType\",\n                RECENTLY_PLAYED_ROUTES.Default,\n            ),\n        ],\n    },\n    { path: \"**\", redirectTo: RECENTLY_PLAYED_ROUTES.Default },\n] as Routes;\n"],
  "mappings": "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",
  "names": ["RECENTLY_PLAYED_ROUTES", "Default", "Grouped", "RECENTLY_PLAYED_COLUMNS_KEYS_DEFAULT", "Index", "Name", "Date", "Link", "RECENTLY_PLAYED_COLUMNS_KEYS_MAPPINGS_DEFAULT", "RECENTLY_PLAYED_COLUMNS_KEYS_GROUPED", "Score", "RECENTLY_PLAYED_COLUMNS_KEYS_MAPPINGS_GROUPED", "RECENTLY_PLAYED_COLUMNS_KEYS_ALL", "__spreadValues", "RecentlyPlayedHTTPService", "_url", "_httpClient", "__privateAdd", "environment", "apiBaseUrl", "inject", "HttpClient", "getRecentlyPlayedItems$", "params", "__privateGet", "get", "factory", "\u0275fac", "providedIn", "_RecentlyPlayedHTTPService", "RecentlyPlayedService", "_topItemsService", "__privateAdd", "inject", "TopItemsService", "convertRecentlyPlayedItemToLimited", "item", "track", "played_at", "structuredClone", "name", "artists", "external_urls", "__privateGet", "convertTopTrackToLimited", "convertRecentlyPlayedItemToGrouped", "score", "normalizedScore", "groupRecentlyPlayedItems", "items", "convertedAndSorted", "Array", "from", "reduce", "acc", "curr", "key", "spotify", "itemByKey", "get", "set", "__spreadProps", "__spreadValues", "Map", "map", "value", "sort", "scoreA", "scoreB", "maxScore", "normalizeScore", "factory", "\u0275fac", "providedIn", "_RecentlyPlayedService", "RecentlyPlayedStateService", "_recentlyPlayedHTTPService", "_recentlyPlayedService", "constructor", "__privateAdd", "inject", "RecentlyPlayedHTTPService", "RecentlyPlayedService", "recentlyPlayedItemsLimited$", "__privateGet", "getRecentlyPlayedItems$", "before", "Date", "getTime", "limit", "pipe", "takeUntilDestroyed", "map", "items", "item", "convertRecentlyPlayedItemToLimited", "shareReplay", "bufferSize", "refCount", "recentlyPlayedItemsGrouped$", "groupRecentlyPlayedItems", "factory", "\u0275fac", "providedIn", "_RecentlyPlayedStateService", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "column_r1", "value", "dataIndex_r2", "\u0275\u0275template", "RecentlyPlayedComponent_Conditional_6_For_2_Conditional_2_td_0_Template", "\u0275\u0275pipeBind1", "item_r3", "name", "RecentlyPlayedComponent_Conditional_6_For_2_Conditional_3_td_0_Template", "\u0275\u0275element", "\u0275\u0275property", "item_r4", "score", "\u0275\u0275pureFunction1", "_c0", "normalizedScore", "\u0275\u0275textInterpolate", "RecentlyPlayedComponent_Conditional_6_For_2_Conditional_4_td_0_Template", "\u0275\u0275pipeBind2", "item_r5", "played_at", "RecentlyPlayedComponent_Conditional_6_For_2_Conditional_5_td_0_Template", "\u0275\u0275listener", "$event", "i0", "\u0275\u0275restoreView", "_r6", "\u0275\u0275resetView", "stopPropagation", "item_r7", "external_urls", "spotify", "\u0275\u0275sanitizeUrl", "RecentlyPlayedComponent_Conditional_6_For_2_Conditional_6_td_0_Template", "\u0275\u0275elementContainerStart", "RecentlyPlayedComponent_Conditional_6_For_2_th_1_Template", "RecentlyPlayedComponent_Conditional_6_For_2_Conditional_2_Template", "RecentlyPlayedComponent_Conditional_6_For_2_Conditional_3_Template", "RecentlyPlayedComponent_Conditional_6_For_2_Conditional_4_Template", "RecentlyPlayedComponent_Conditional_6_For_2_Conditional_5_Template", "RecentlyPlayedComponent_Conditional_6_For_2_Conditional_6_Template", "key", "\u0275\u0275conditional", "ctx_r7", "RECENTLY_PLAYED_COLUMNS_KEYS_ALL", "Index", "Name", "Score", "Date", "Link", "\u0275\u0275repeaterCreate", "RecentlyPlayedComponent_Conditional_6_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "RecentlyPlayedComponent_Conditional_6_tr_4_Template", "RecentlyPlayedComponent_Conditional_6_tr_5_Template", "ctx", "\u0275\u0275repeater", "columns", "keepOrder", "columnKeys", "RecentlyPlayedComponent", "_recentlyPlayedStateService", "constructor", "__privateAdd", "viewType", "input", "required", "RECENTLY_PLAYED_ROUTES", "computed", "Default", "RECENTLY_PLAYED_COLUMNS_KEYS_MAPPINGS_DEFAULT", "RECENTLY_PLAYED_COLUMNS_KEYS_MAPPINGS_GROUPED", "Object", "keys", "switchToView", "Grouped", "__privateSet", "inject", "RecentlyPlayedStateService", "items$", "__privateGet", "recentlyPlayedItemsLimited$", "recentlyPlayedItemsGrouped$", "selectors", "inputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "RecentlyPlayedComponent_Conditional_6_Template", "tmp_3_0", "AsyncPipe", "DatePipe", "KeyValuePipe", "MatButtonModule", "MatAnchor", "MatIconAnchor", "MatIconModule", "MatIcon", "MatTableModule", "MatTable", "MatHeaderCellDef", "MatHeaderRowDef", "MatColumnDef", "MatCellDef", "MatRowDef", "MatHeaderCell", "MatCell", "MatHeaderRow", "MatRow", "MatTooltipModule", "MatTooltip", "NgStyle", "RouterLink", "TitleCasePipe", "styles", "changeDetection", "_RecentlyPlayedComponent", "recently_played_routes_default", "path", "component", "RecentlyPlayedComponent", "canActivate", "routeParamGuard", "RECENTLY_PLAYED_ROUTES", "Default", "redirectTo"]
}
