{
  "version": 3,
  "sources": ["src/app/api/top-items-http.service.ts", "src/app/components/routes/top-items.service.ts", "src/app/state/top-items-state.service.ts", "src/app/components/routes/top-tracks/top-tracks.component.ts", "src/app/components/routes/top-tracks/top-tracks.component.html", "src/app/components/routes/top-tracks/top-tracks.routes.ts"],
  "sourcesContent": ["import { HttpClient } from \"@angular/common/http\";\nimport { inject, Injectable } from \"@angular/core\";\nimport { environment } from \"@env/environment\";\nimport {\n    Album,\n    TopArtist,\n    TopItems,\n    TopItemsParams,\n    TopItemsType,\n    TopTrack,\n} from \"@model/top-items.model\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class TopItemsHTTPService {\n    readonly #url = `${environment.apiBaseUrl}/me/top`;\n\n    readonly #httpClient = inject(HttpClient);\n\n    /**\n     * Fetches top items from the API based on the specified type and parameters.\n     *\n     * @param type - The type of top items to fetch. This determines the endpoint to which the HTTP request is made.\n     * @param params - Additional query parameters for the request, such as time range, limit and offset.\n     * @returns An observable that emits the fetched top items.\n     */\n    getTopItems$<\n        T extends TopArtist | TopTrack<Album, TopArtist>,\n        U extends TopItemsType,\n    >(type: U, params: TopItemsParams): Observable<TopItems<T>> {\n        return this.#httpClient.get<TopItems<T>>(`${this.#url}/${type}`, {\n            params,\n        });\n    }\n}\n", "import { Injectable } from \"@angular/core\";\nimport {\n    Album,\n    AlbumLimited,\n    TopArtist,\n    TopArtistLimited,\n    TopTrack,\n    TopTrackLimited,\n} from \"@model/top-items.model\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class TopItemsService {\n    /**\n     * Simplifies the `TopTrack` by transforming it to include only essential fields.\n     *\n     * @param track - The object to be converted.\n     * @returns An object containing a subset of properties from the original one.\n     */\n    convertTopTrackToLimited(\n        track: TopTrack<Album, TopArtist>,\n    ): TopTrackLimited {\n        const { album, external_urls, name, artists } = structuredClone(track);\n        return {\n            album: this.convertAlbumToLimited(album),\n            external_urls,\n            name,\n            artists: artists.map((artist) =>\n                this.convertTopArtistToLimited(artist),\n            ),\n        };\n    }\n\n    /**\n     * Simplifies the `Album` by transforming it to include only essential fields.\n     *\n     * @param album - The object to be converted.\n     * @returns An object containing a subset of properties from the original one.\n     */\n    convertAlbumToLimited(album: Album): AlbumLimited {\n        const {\n            external_urls,\n            name,\n            album_type,\n            total_tracks,\n            images,\n            release_date,\n        } = structuredClone(album);\n        return {\n            external_urls,\n            name,\n            album_type,\n            total_tracks,\n            images,\n            release_date,\n        };\n    }\n\n    /**\n     * Simplifies the `Artist` by transforming it to include only essential fields.\n     *\n     * @param artists - The object to be converted.\n     * @returns An object containing a subset of properties from the original one.\n     */\n    convertTopArtistToLimited(artist: TopArtist): TopArtistLimited {\n        const { external_urls, name, images, genres } = structuredClone(artist);\n        return { external_urls, name, images, genres };\n    }\n}\n", "import { computed, inject, Injectable, signal } from \"@angular/core\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { TopItemsHTTPService } from \"@api/top-items-http.service\";\nimport {\n    Album,\n    TimeRangeOptions,\n    TopArtist,\n    TopItemsState,\n    TopTrack,\n    TopTrackLimited,\n} from \"@model/top-items.model\";\nimport { map, of, Subject, switchMap } from \"rxjs\";\n\nimport { TopItemsService } from \"../components/routes/top-items.service\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class TopItemsStateService {\n    readonly #topItemsHTTPService = inject(TopItemsHTTPService);\n    readonly #topItemsService = inject(TopItemsService);\n\n    readonly #topTracksState = signal<TopItemsState<TopTrackLimited>>({\n        itemsByTimeRange: {\n            [TimeRangeOptions.ShortTerm]: [],\n            [TimeRangeOptions.MediumTerm]: [],\n            [TimeRangeOptions.LongTerm]: [],\n        },\n        currentTimeRange: TimeRangeOptions.ShortTerm,\n    });\n\n    // #region selectors\n    topTracks = computed(\n        () =>\n            this.#topTracksState().itemsByTimeRange[\n                this.#topTracksState().currentTimeRange\n            ],\n    );\n\n    topTracksTimeRange = computed(\n        () => this.#topTracksState().currentTimeRange,\n    );\n    // #endregion\n\n    // #region sources\n    readonly #topTracksTimeRange$ = new Subject<TimeRangeOptions>();\n\n    readonly #topTracks$ = this.#topTracksTimeRange$.pipe(\n        switchMap((timeRange) => {\n            const topTracksByTimeRange =\n                this.#topTracksState().itemsByTimeRange[timeRange];\n            if (topTracksByTimeRange.length) {\n                return of(topTracksByTimeRange);\n            }\n            return this.#topItemsHTTPService\n                .getTopItems$<TopTrack<Album, TopArtist>, \"tracks\">(\"tracks\", {\n                    time_range: timeRange,\n                    limit: 50,\n                    offset: 0,\n                })\n                .pipe(\n                    map(({ items }) =>\n                        items.map((item) =>\n                            this.#topItemsService.convertTopTrackToLimited(\n                                item,\n                            ),\n                        ),\n                    ),\n                );\n        }),\n    );\n    // #endregion\n\n    constructor() {\n        // #region reducers\n        this.#topTracksTimeRange$\n            .pipe(takeUntilDestroyed())\n            .subscribe((timeRange) => {\n                this.#topTracksState.update(\n                    (state): TopItemsState<TopTrackLimited> => ({\n                        ...state,\n                        currentTimeRange: timeRange,\n                    }),\n                );\n            });\n\n        this.#topTracks$.pipe(takeUntilDestroyed()).subscribe((tracks) =>\n            this.#topTracksState.update(\n                (state): TopItemsState<TopTrackLimited> => ({\n                    ...state,\n                    itemsByTimeRange: {\n                        ...state.itemsByTimeRange,\n                        [state.currentTimeRange]: tracks,\n                    },\n                }),\n            ),\n        );\n        // #endregion\n    }\n\n    /**\n     * Publishes a new time range to the `topTracksTimeRange$` subject, updating the current time\n     * range for top tracks.\n     *\n     * @param timeRange - The new time range to be published.\n     */\n    publishTopTracksTimeRange(timeRange: TimeRangeOptions): void {\n        this.#topTracksTimeRange$.next(timeRange);\n    }\n}\n", "import {\n    ChangeDetectionStrategy,\n    Component,\n    inject,\n    Input,\n    OnChanges,\n} from \"@angular/core\";\nimport { TimeRangeOptions } from \"@model/top-items.model\";\nimport { TopItemsStateService } from \"@state/top-items-state.service\";\n\n@Component({\n    selector: \"app-top-tracks\",\n    standalone: true,\n    imports: [],\n    templateUrl: \"./top-tracks.component.html\",\n    styleUrl: \"./top-tracks.component.scss\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TopTracksComponent implements OnChanges {\n    @Input() protected readonly timeRange: TimeRangeOptions =\n        TimeRangeOptions.ShortTerm;\n\n    readonly #topItemsStateService = inject(TopItemsStateService);\n\n    ngOnChanges(): void {\n        this.#topItemsStateService.publishTopTracksTimeRange(this.timeRange);\n    }\n}\n", "<p>top-tracks works!</p>\n", "import { Routes } from \"@angular/router\";\nimport { timeRangeGuard } from \"@core/helpers\";\nimport { TimeRangeOptions, TopItemsRoutes } from \"@model/top-items.model\";\n\nimport { TopTracksComponent } from \"./top-tracks.component\";\n\nexport default [\n    {\n        path: \":timeRange\",\n        component: TopTracksComponent,\n        canActivate: [timeRangeGuard(TopItemsRoutes.TopTracks)],\n    },\n    { path: \"**\", redirectTo: TimeRangeOptions.ShortTerm },\n] as Routes;\n"],
  "mappings": "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",
  "names": ["TopItemsHTTPService", "_url", "_httpClient", "__privateAdd", "environment", "apiBaseUrl", "inject", "HttpClient", "getTopItems$", "type", "params", "__privateGet", "get", "factory", "\u0275fac", "providedIn", "_TopItemsHTTPService", "TopItemsService", "convertTopTrackToLimited", "track", "album", "external_urls", "name", "artists", "structuredClone", "convertAlbumToLimited", "map", "artist", "convertTopArtistToLimited", "album_type", "total_tracks", "images", "release_date", "genres", "factory", "\u0275fac", "providedIn", "_TopItemsService", "TopItemsStateService", "_topItemsHTTPService", "_topItemsService", "_topTracksState", "_topTracksTimeRange$", "_topTracks$", "constructor", "__privateAdd", "__privateSet", "inject", "TopItemsHTTPService", "TopItemsService", "signal", "itemsByTimeRange", "TimeRangeOptions", "ShortTerm", "MediumTerm", "LongTerm", "currentTimeRange", "topTracks", "computed", "__privateGet", "topTracksTimeRange", "Subject", "pipe", "switchMap", "timeRange", "topTracksByTimeRange", "length", "of", "getTopItems$", "time_range", "limit", "offset", "map", "items", "item", "convertTopTrackToLimited", "takeUntilDestroyed", "subscribe", "update", "state", "__spreadProps", "__spreadValues", "tracks", "publishTopTracksTimeRange", "next", "factory", "\u0275fac", "providedIn", "_TopItemsStateService", "TopTracksComponent", "_topItemsStateService", "constructor", "__privateAdd", "timeRange", "TimeRangeOptions", "ShortTerm", "__privateSet", "inject", "TopItemsStateService", "ngOnChanges", "__privateGet", "publishTopTracksTimeRange", "selectors", "inputs", "standalone", "features", "\u0275\u0275NgOnChangesFeature", "\u0275\u0275StandaloneFeature", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "_TopTracksComponent", "top_tracks_routes_default", "path", "component", "TopTracksComponent", "canActivate", "timeRangeGuard", "TopItemsRoutes", "TopTracks", "redirectTo", "TimeRangeOptions", "ShortTerm"]
}
