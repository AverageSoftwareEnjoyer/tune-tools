{
  "version": 3,
  "sources": ["src/app/model/top-items.model.ts", "src/app/core/helpers.ts"],
  "sourcesContent": ["import { ExternalUrls, Followers, Image } from \"./user.model\";\n\nexport interface Restrictions {\n    reason: \"market\" | \"product\" | \"explicit\";\n}\n\nexport interface ExternalIds {\n    isrc: string;\n    ean: string;\n    upc: string;\n}\n\nexport type SimplifiedArtist = Omit<TopItem<\"artist\">, \"popularity\">;\n\nexport interface Album extends Omit<TopItem<\"album\">, \"popularity\"> {\n    album_type: \"ALBUM\" | \"COMPILATION\" | \"EP\" | \"SINGLE\";\n    total_tracks: number;\n    available_markets: string[];\n    images: Image[];\n    release_date: string;\n    release_date_precision: \"year\" | \"month\" | \"day\";\n    restrictions: Restrictions;\n    artists: SimplifiedArtist[];\n}\n\nexport type TopItemsType = \"artists\" | \"tracks\";\n\nexport interface TopItemsMappings {\n    artists: TopArtistLimited;\n    tracks: TopTrackLimited;\n}\n\nexport type ItemType = \"artist\" | \"track\" | \"album\";\n\nexport interface TopItem<T extends ItemType> {\n    external_urls: ExternalUrls;\n    href: string;\n    id: string;\n    name: string;\n    popularity: number;\n    type: T;\n    uri: string;\n}\n\nexport interface TopArtist extends TopItem<\"artist\"> {\n    followers: Followers;\n    genres: string[];\n    images: Image[];\n}\n\nexport interface TopTrack<\n    T extends Album | AlbumLimited,\n    U extends SimplifiedArtist | SimplifiedArtistLimited,\n> extends TopItem<\"track\"> {\n    album: T;\n    artists: U[];\n    available_markets: string[];\n    disc_number: number;\n    duration_ms: number;\n    explicit: boolean;\n    external_ids: ExternalIds;\n    restrictions: Restrictions;\n    preview_url: string | null;\n    track_number: number;\n    is_local: boolean;\n}\n\nexport interface TopItems<\n    T extends TopTrack<Album, SimplifiedArtist> | TopArtist,\n> {\n    href: string;\n    limit: number;\n    next: string | null;\n    offset: number;\n    previous: null;\n    total: number;\n    items: T[];\n}\n\nexport type TopArtists = TopItems<TopArtist>;\n\nexport type TopTracks = TopItems<TopTrack<Album, TopArtist>>;\n\nexport enum TimeRangeOptions {\n    ShortTerm = \"short_term\",\n    MediumTerm = \"medium_term\",\n    LongTerm = \"long_term\",\n}\n\nexport enum TimeRangeNames {\n    ShortTerm = \"Last 4 weeks\",\n    MediumTerm = \"Last 6 months\",\n    LongTerm = \"Last year\",\n}\n\nexport const TIME_RANGE_MAPPINGS: Record<TimeRangeOptions, TimeRangeNames> = {\n    [TimeRangeOptions.ShortTerm]: TimeRangeNames.ShortTerm,\n    [TimeRangeOptions.MediumTerm]: TimeRangeNames.MediumTerm,\n    [TimeRangeOptions.LongTerm]: TimeRangeNames.LongTerm,\n} as const;\n\nexport interface TopItemsParams\n    extends Record<string, TimeRangeOptions | number> {\n    time_range: TimeRangeOptions;\n    limit: 50;\n    offset: 0;\n}\n\nexport interface TopItemsByTimeRange<\n    T extends TopTrackLimited | TopArtistLimited,\n> {\n    [TimeRangeOptions.ShortTerm]: T[];\n    [TimeRangeOptions.MediumTerm]: T[];\n    [TimeRangeOptions.LongTerm]: T[];\n}\n\nexport interface TopItemsState<T extends TopTrackLimited | TopArtistLimited> {\n    itemsByTimeRange: TopItemsByTimeRange<T>;\n    currentTimeRange: TimeRangeOptions;\n}\n\nexport type AlbumLimited = Pick<\n    Album,\n    | \"external_urls\"\n    | \"name\"\n    | \"album_type\"\n    | \"total_tracks\"\n    | \"images\"\n    | \"release_date\"\n>;\n\nexport type TopTrackLimited = Pick<\n    TopTrack<AlbumLimited, SimplifiedArtistLimited>,\n    \"album\" | \"external_urls\" | \"name\" | \"artists\"\n>;\n\nexport type TopArtistLimited = Pick<\n    TopArtist,\n    \"external_urls\" | \"name\" | \"images\" | \"genres\"\n>;\n\nexport type SimplifiedArtistLimited = Pick<TopArtist, \"external_urls\" | \"name\">;\n\nexport enum TopItemsRoutes {\n    TopTracks = \"top-tracks\",\n    TopArtists = \"top-artists\",\n    TopGenres = \"top-genres\",\n}\n\nexport enum TopItemsColumnsKeys {\n    Index = \"index\",\n    Image = \"image\",\n    Name = \"name\",\n    Artists = \"artists\",\n    Link = \"link\",\n    Expand = \"expand\",\n}\n\nexport const TOP_TRACKS_COLUMNS_MAPPINGS_FILTERED = {\n    [TopItemsColumnsKeys.Index]: \"No.\",\n    [TopItemsColumnsKeys.Image]: \"Album\",\n    [TopItemsColumnsKeys.Name]: \"Info\",\n    [TopItemsColumnsKeys.Link]: \"Link\",\n} as const;\n\nexport const TOP_TRACKS_COLUMNS_MAPPINGS = {\n    [TopItemsColumnsKeys.Index]: \"No.\",\n    [TopItemsColumnsKeys.Image]: \"Album\",\n    [TopItemsColumnsKeys.Name]: \"Name\",\n    [TopItemsColumnsKeys.Artists]: \"Artists\",\n    [TopItemsColumnsKeys.Link]: \"Link\",\n} as const;\n\nexport type TopTracksColumnsMappingsType = typeof TOP_TRACKS_COLUMNS_MAPPINGS;\n\nexport type TopTracksColumnsMappingsFilteredType =\n    typeof TOP_TRACKS_COLUMNS_MAPPINGS_FILTERED;\n\n// TODO: Genres\n", "import { inject } from \"@angular/core\";\nimport { CanActivateFn, Router } from \"@angular/router\";\nimport { TimeRangeOptions, TopItemsRoutes } from \"@model/top-items.model\";\n\n/**\n * Checks if the provided value is a valid member of the specified enum-like object.\n * It returns a type guard function that can be used to check if a particular value is one of the\n * values in the enum-like object.\n *\n * @param enumObject - The enum-like object with string keys and values of any type.\n * @returns A function that takes a value of any type and returns `true` if the value is one of\n * the enum-like object's values, and `false` otherwise.\n */\nexport const isAnEnum =\n    <T extends Record<string, unknown>>(enumObject: T) =>\n    (maybeEnum: unknown): maybeEnum is T[keyof T] =>\n        Object.values(enumObject).includes(maybeEnum as T[keyof T]);\n\n/**\n * Creates a route guard function to validate `timeRange` parameters against the `TimeRangeOptions`\n * enum.\n * If the `timeRange` parameter is valid, the navigation proceeds; otherwise, it redirects to a\n * default route.\n *\n * @param baseRoute - The base route to which the user should be redirected if `timeRange` is\n * invalid.\n * @returns A route guard function that checks the validity of the `timeRange` route parameter.\n */\nexport const timeRangeGuard =\n    (baseRoute: TopItemsRoutes): CanActivateFn =>\n    (route) => {\n        if (isAnEnum(TimeRangeOptions)(route.params[\"timeRange\"])) {\n            return true;\n        }\n        return inject(Router).parseUrl(\n            `${baseRoute}/${TimeRangeOptions.ShortTerm}`,\n        );\n    };\n\n/**\n * Gets an element to be compared and returns `0` to maintain the order of key-value pairs received\n * from the KeyValuePipe.\n *\n * @returns `0` to maintain the order of key-value pairs.\n */\nexport const keepOrder = (): 0 => 0;\n"],
  "mappings": "iFAmFA,IAAYA,EAAZ,SAAYA,EAAgB,CACxBA,OAAAA,EAAA,UAAA,aACAA,EAAA,WAAA,cACAA,EAAA,SAAA,YAHQA,CAIZ,EAJYA,GAAgB,CAAA,CAAA,EAMhBC,EAAZ,SAAYA,EAAc,CACtBA,OAAAA,EAAA,UAAA,eACAA,EAAA,WAAA,gBACAA,EAAA,SAAA,YAHQA,CAIZ,EAJYA,GAAc,CAAA,CAAA,EAMbC,EAAgE,CACzE,CAACF,EAAiBG,SAAS,EAAGF,EAAeE,UAC7C,CAACH,EAAiBI,UAAU,EAAGH,EAAeG,WAC9C,CAACJ,EAAiBK,QAAQ,EAAGJ,EAAeI,UA6CpCC,EAAZ,SAAYA,EAAc,CACtBA,OAAAA,EAAA,UAAA,aACAA,EAAA,WAAA,cACAA,EAAA,UAAA,aAHQA,CAIZ,EAJYA,GAAc,CAAA,CAAA,EAMdC,EAAZ,SAAYA,EAAmB,CAC3BA,OAAAA,EAAA,MAAA,QACAA,EAAA,MAAA,QACAA,EAAA,KAAA,OACAA,EAAA,QAAA,UACAA,EAAA,KAAA,OACAA,EAAA,OAAA,SANQA,CAOZ,EAPYA,GAAmB,CAAA,CAAA,EASlBC,EAAuC,CAChD,CAACD,EAAoBE,KAAK,EAAG,MAC7B,CAACF,EAAoBG,KAAK,EAAG,QAC7B,CAACH,EAAoBI,IAAI,EAAG,OAC5B,CAACJ,EAAoBK,IAAI,EAAG,QAGnBC,EAA8B,CACvC,CAACN,EAAoBE,KAAK,EAAG,MAC7B,CAACF,EAAoBG,KAAK,EAAG,QAC7B,CAACH,EAAoBI,IAAI,EAAG,OAC5B,CAACJ,EAAoBO,OAAO,EAAG,UAC/B,CAACP,EAAoBK,IAAI,EAAG,QC7JzB,IAAMG,EAC2BC,GACnCC,GACGC,OAAOC,OAAOH,CAAU,EAAEI,SAASH,CAAuB,EAYrDI,EACRC,GACAC,GACOR,EAASS,CAAgB,EAAED,EAAME,OAAO,SAAY,EAC7C,GAEJC,EAAOC,CAAM,EAAEC,SAClB,GAAGN,CAAS,IAAIE,EAAiBK,SAAS,EAAE,EAU3CC,EAAYA,IAAS",
  "names": ["TimeRangeOptions", "TimeRangeNames", "TIME_RANGE_MAPPINGS", "ShortTerm", "MediumTerm", "LongTerm", "TopItemsRoutes", "TopItemsColumnsKeys", "TOP_TRACKS_COLUMNS_MAPPINGS_FILTERED", "Index", "Image", "Name", "Link", "TOP_TRACKS_COLUMNS_MAPPINGS", "Artists", "isAnEnum", "enumObject", "maybeEnum", "Object", "values", "includes", "timeRangeGuard", "baseRoute", "route", "TimeRangeOptions", "params", "inject", "Router", "parseUrl", "ShortTerm", "keepOrder"]
}
